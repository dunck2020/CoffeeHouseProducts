@model PaginatedList<CoffeeHouseProducts.Models.Product>

@{
    ViewData["Title"] = "Product";
}
<p>
    <a asp-action="Create" style="color:white;">Create New</a>
</p>
<form class="form-control form-control-md form-control-rounded" asp-action="Index" method="get" style="background-color: #343a40; color: white;">
    <div class="form-actions no-color pb-2">
        <p style="color: white;">
            Find by name or description: <input type="text" name="SearchString" value=@ViewData["currentFilter"] />
            <input type="submit" value="Search" class="btn btn-default" style="color: white;"/> |
            <a asp-action="Index" style="color: white; justify-content:normal">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table table-striped table-dark m-2">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSort"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Product Name</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DescriptionSort"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Description</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSort"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Price</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["TypeSort"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Type</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurretFilter"]"
   class="btn btn-dark btn-sm @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurretFilter"]"
   class="btn btn-dark btn-sm @nextDisabled">
    Next
</a>
